
#
# 01. Create subscription to an HTTPS endpoint
# 02. Create entity, triggering notification
# 03. Dump accumulator and see no notification
# 04. Look in the CB log for the warning about cert not accepted
#


echo "01. Create subscription to an HTTPS endpoint"
echo "============================================"
payload='{
  "subject": {
    "entities": [
      {
        "idPattern": "E.*"
      }
    ],
    "condition": {
      "attrs": [ ]
    }
  },
  "notification": {
    "http": {"url": "https://localhost:'$LISTENER_PORT'/notify"}
  }
}'
orionCurl --url /v2/subscriptions --payload "$payload"
echo
echo


echo "02. Create entity, triggering notification"
echo "=========================================="
payload='{
  "id": "E1",
  "A1": {
    "value": 1
  }
}'
orionCurl --url /v2/entities --payload "$payload"
echo
echo


echo "03. Dump accumulator and see no notification"
echo "============================================"
accumulatorDump IPV4 HTTPS
echo
echo

# Note the REGEX(\S+) in the REGEXPECT part for step 4. This is due to that the log message is slightly different
# depending on the libcurl version, some versions (newer ones) use "given" while other (older versions) use "known"
#
# The grep "notification failure" step is due to the error message also appear in update DB messages in noCache case
# so we need to make the filter narrower

echo "04. Look in the CB log for the warning about cert not accepted"
echo "=============================================================="

LINE1=$(grep "Peer certificate cannot be authenticated" /tmp/contextBroker.log | grep "notification failure" | awk -F 'notification failure for queue worker: ' '{print $2}')
LINE2=$(grep "Peer certificate cannot be authenticated" /tmp/contextBroker.log | grep "notification failure" | awk -F 'notification failure for sender-thread: ' '{print $2}')

# Depending CB_THREADPOOL=ON|OFF, either LINE1 or LINE2 has the text we are looking for but not both at the same time
echo $LINE1$LINE2

echo
echo


